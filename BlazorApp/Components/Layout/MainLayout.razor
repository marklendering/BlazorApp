@using Microsoft.AspNetCore.Components
@using Radzen.Blazor
@inherits LayoutComponentBase
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject TooltipService TooltipService
@inject DialogService DialogService

<RadzenComponents />

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-config-sidebar'">
<RadzenHeader>
    <ChildContent>
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0px">
            <RadzenColumn Size="5">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                    <span style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">Radzen Blazor Components</span>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    @* <div Class="rz-display-none rz-display-sm-inline-flex align-items-center">
                        <a href="/docs/" title="Radzen Blazor Components Documentation" Class="rz-mx-2 rz-mx-lg-4" target="_blank">Documentation</a>
                        <a href="https://www.radzen.com/" title="Create .NET Core web applications fast & easy" Class="rz-text-nowrap rz-mx-2 rz-mx-lg-4" target="_blank">About Radzen</a>
                        <a href="https://github.com/radzenhq/radzen-blazor" title="Star Radzen Blazor Components on GitHub" Class="rz-text-nowrap rz-mx-2 rz-mx-lg-4" target="_blank">GitHub</a>
                    </div> *@
                    <RadzenSidebarToggle Icon="settings" Click="@(() => configSidebarExpanded = !configSidebarExpanded)" Class="rz-m-0" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
</RadzenHeader>
<RadzenBody @ref="@body0">
    <ChildContent>
        <RadzenContentContainer Name="main">
            <RadzenRow Gap="2rem" Class="rz-pt-6 rz-px-4 rz-px-sm-8 rz-px-xl-12">
                <RadzenColumn Size="12">
                    <RadzenRow Class="rz-mx-auto" Style="max-width: 1600px;">
                        <RadzenColumn Size="12">
                            @Body
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenContentContainer>
    </ChildContent>
</RadzenBody>
<RadzenSidebar @ref="sidebar0" @bind-Expanded="@sidebarExpanded" style="display: flex; flex-direction: column">
    <RadzenStack>
        <RadzenPanelMenu Multiple="false">
            <RadzenPanelMenuItem Text="Home" Path="Home" Icon="home"></RadzenPanelMenuItem>
            <RadzenPanelMenuItem Text="General" Icon="account_box">
                <RadzenPanelMenuItem Text="Counter" Path="Counter" Icon="account_circle"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Error" Path="Error" Icon="line_weight"></RadzenPanelMenuItem>
                <RadzenPanelMenuItem Text="Weather" Path="Weather" Icon="attach_file"></RadzenPanelMenuItem>
            </RadzenPanelMenuItem>
        </RadzenPanelMenu>
    </RadzenStack>
</RadzenSidebar>
</RadzenLayout>

@if (!rendered)
{
<div Class="rz-app-loading">
    <div Class="logo-loading"></div>
</div>
}

@code {
    RadzenSidebar sidebar0;
    RadzenBody body0;
    RadzenButton wcagColorsInfo;
    RadzenButton freeThemesInfo;
    RadzenButton premiumThemesInfo;
    bool sidebarExpanded = true;
    bool configSidebarExpanded = false;
    bool rendered;
    bool WCAG;

    protected override void OnInitialized()
    {

        System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            rendered = true;
        }
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();

    }

    async Task ShowVideoDialog()
    {
        await DialogService.OpenAsync("Create new Blazor app", ds =>
        @<div Class="embed-container">
            <iframe src="https://www.youtube.com/embed/_F-CUWxYvCA?&rel=0" frameborder="0" allowfullscreen=""></iframe>
        </div>, new DialogOptions() {
                  Width = "50%",
                  Resizable = true
              });
    }
}